Expected<-function(qmatrix,K,J){
qmatrix<-as.matrix(qmatrix)
response<-matrix(0,2^K,J)
temp<-list()
for(i in 1:K){
temp[[i]]<-c(1,0)}
skillp<-matrix(unlist(expand.grid(temp)),nrow=2^K)
for(j in 1:J){
tem<-t(skillp)^qmatrix[j,]
response[,j]<-apply(tem,2,prod)
}
response
}
#################################################
DINA<-function(s,g,Q.item,Q.person,J){
p<-matrix(NA,N,J)
Q.item<-as.matrix(Q.item)
Q.person<-as.matrix(Q.person)
temp<-vector()
for(j in 1:J){
temp<-t(Q.person)^Q.item[j,]
p[,j]<-((1-s[j])^apply(temp,2,prod))*(g[j]^(1-apply(temp,2,prod))) 
}
colnames(p)<-paste("item_",c(1:J),sep="")
rownames(p)<-paste("p_",c(1:N),sep="")
p
}
################################################
draw.s<- function(s,g,X,Q.item,Q.person,J){
s1<-runif(J)

temp<-DINA(s,g,Q.item,Q.person,J)
temp<-ifelse(X,temp,1-temp)
rum0<-apply(temp,2,prod)

temp<-DINA(s1,g,Q.item,Q.person,J)
temp<-ifelse(X,temp,1-temp)
rum1<-apply(temp,2,prod)

accept<-ifelse(rum0==0,1,rum1/rum0)
accept<-ifelse(accept>1,1,accept)
accept<-ifelse(runif(J)<accept,1,0)
s<-ifelse(accept,s1,s)
s
}

###################################################
draw.g<-function(s,g,X,Q.item,Q.person,J){
g1<-runif(J,0,1-s)

temp<-DINA(s,g,Q.item,Q.person,J)
temp<-ifelse(X,temp,1-temp)
rum0<-apply(temp,2,prod)

temp<-DINA(s,g1,Q.item,Q.person,J)
temp<-ifelse(X,temp,1-temp)
rum1<-apply(temp,2,prod)

accept<-ifelse(rum0==0,1,rum1/rum0)
accept<-ifelse(accept>1,1,accept)
accept<-ifelse(runif(J)<accept,1,0)
g<-ifelse(accept,g1,g)
g
}

###################################################
draw.person<-function(s,g,X,Q.item,Q.person0,Q.personp,K,J){
Q.person1<-	ifelse(matrix(runif(N*K,0,1),ncol=K,nrow=N)<Q.personp,1,0)
for(i in 1:K){
temp<-DINA(s,g,Q.item[,i],Q.person0[,i],J)
temp<-ifelse(X,temp,1-temp)
rum0<-apply(temp,1,prod)

temp<-DINA(s,g,Q.item[,i],Q.person1[,i],J)
temp<-ifelse(X,temp,1-temp)
rum1<-apply(temp,1,prod)  
 
accept<-ifelse(rum0==0,1,rum1/rum0)
accept<-ifelse(accept>1,1,accept)
accept<-ifelse(matrix(runif(N),nrow=N)<accept,1,0)
Q.person0[,i]<-ifelse(accept,Q.person1[,i],Q.person0[,i])
}
Q.person<-Q.person0
Q.person
}
##############################################################
Q.person.p<-function(X,Q.item,N,J,K){
Eresponse<-Expected(Q.item,K,J)
temp<-list()
for(i in 1:K){
temp[[i]]<-c(1,0)}
skillp<-matrix(unlist(expand.grid(temp)),nrow=2^K)
library(AMORE)
net<-newff(n.neurons=c(J,J,K,K), learning.rate.global=1e-2, momentum.global=0.5,
        error.criterium="LMS", Stao=NA, hidden.layer="tansig", 
        output.layer="purelin", method="ADAPTgdwm")
result <- train(net,Eresponse,skillp, error.criterium="LMS", report=TRUE, show.step=100, n.shows=5 )
y<- sim(result$net,X)
y<-round(y,3)
y<-ifelse(y<0,0,y)
y<-ifelse(y>1,1,y)
Q.person.p<-y
Q.person.p
}

##################################################################
ITER<-function(Q.item,Q.personp,X,N,K,J,iter){
s0<-c(rep(0,J))
g0<-c(rep(0,J))
Q.person0<-matrix(rep(1,N*K),nrow=N,ncol=K)
s_temp<-matrix(NA,nrow=J,ncol=iter,dimnames=list(c(paste("item_",c(1:J),sep="")),c(paste("iter",c(1:iter),sep=""))))
g_temp<-matrix(NA,nrow=J,ncol=iter,dimnames=list(c(paste("item_",c(1:J),sep="")),c(paste("iter",c(1:iter),sep=""))))
person_temp<-matrix(NA,nrow=N,ncol=iter*K)
a=0
while(a<iter){
a=a+1
print(a)
s1<-draw.s(s0,g0,X,Q.item,Q.person0,J)
g1<-draw.g(s1,g0,X,Q.item,Q.person0,J)
Q.person1<-draw.person(s1,g1,X,Q.item,Q.person0,Q.personp,K,J)
s_temp[,a]<-s1
g_temp[,a]<-g1
person_temp[,c((K*a-(K-1)):(K*a))]<-Q.person1
s0<-s1
g0<-g1
Q.person0<-Q.person1
}
res<-list(s_temp=s_temp,g_temp=g_temp,person_temp=person_temp)
res
}
#################################################################
classifciation<-function(Q.est,Q.person,K){
cl<-matrix(NA,nrow=4,ncol=K)
colnames(cl)<-paste("s",c(1:K),sep="")
rownames(cl)<-c("1->1","0->1","1->0","0->0")
for(i in 1:K){
table<-cbind(Q.est[,i],Q.person[,i])
colnames(table)<-c("esti","orig")
cl[1,i]<- nrow(matrix(table[table[,1]==1&table[,2]==1,],ncol=2))
cl[2,i]<- nrow(matrix(table[table[,1]==1&table[,2]==0,],ncol=2))
cl[3,i]<- nrow(matrix(table[table[,1]==0&table[,2]==1,],ncol=2))
cl[4,i]<- nrow(matrix(table[table[,1]==0&table[,2]==0,],ncol=2))
}
temp<-apply(cl[c(1,4),],2,sum)/nrow(Q.person)
temp
}
###################################################
Qest<-function(person_temp,K,iter){
Q.est<-matrix(NA,nrow=N,ncol=K)
alpha<-matrix(NA,nrow=N,ncol=iter)
for(j in 1:K){
for(i in 1:iter){
alpha[,i]<-person_temp[,K*(i-1)+j]
}
Q.est[,j]<-apply(alpha[,100:iter],1,mean)
}
Q.est<-ifelse(Q.est>0.5,1,0)
Q.est
}
################################################
complexQ<-function(l,h,i,J,K){
temp<-list()
for(i in 1:K){
temp[[i]]<-c(1,0)}
pskill<-expand.grid(temp)
subskill<-pskill[apply(pskill,1,sum)>(l-1) &apply(pskill,1,sum)<(h+1),]
tem=1
while(tem==1){
Q<-subskill[sample(c(1:nrow(subskill)),J,replace=TRUE),]
tem<-ifelse(all(apply(Q,2,sum)>(i-1)),0,1)
}
Qitem<-Q
colnames(Qitem)<-paste("s",c(1:ncol(pskill)),sep="")
rownames(Qitem)<-paste("item",c(1:J),sep="")
Qitem
}
##########
simpleQ<-function(J,K){
temp<-matrix(0,J,K)
for(e in 1:K){
temp[c(((e-1)*round(J/K)+1):(e*round(J/K))),e]<-rep(1,round(J/K))
}
temp[J,K]<-1
temp
}
#####################################################
Qpersonsim<-function(N,K,l,h){
require(MASS)
Sigma <- matrix(runif(K*K,l,h),K,K)
diag(Sigma)<-rep(1,K)
Q.person<-ifelse(mvrnorm(n=N, rep(0, K), Sigma)>0,1,0)
Q.person
}
#####################################################
J=25
buring=1000
iter=3000

for(i in c(1000,500,50)){
   N<-i

   for(j in c(0.1,0.2)){
      s<-runif(J,j,2*j)
      g<-runif(J,j,2*j) 

        for(k in c(6,4)){
           K<-k

           for(f in c("simple","complex")){

              for(g in 1:25){

if(f=="simple"){Q.item<-simpleQ(J,K)}
if(f=="complex"){Q.item<-complexQ(1,3,10,J,K)}

Q.person<-Qpersonsim(N,K,0.65,0.8)
prob<-DINA(s,g,Q.item,Q.person,J)
X<-ifelse(matrix(runif(N*J),N,J)<prob,1,0)
Q.personp<-Q.person.p(X,Q.item,N,J,K)

res<-ITER(Q.item,Q.personp,X,N,K,J,iter)
s_temp<-res$s_temp
g_temp<-res$g_temp
person_temp<-res$person_temp

sest<-apply(s_temp[,buring:iter],1,mean)
sresidual<-sest-s
write.csv(sresidual,paste("sresidual",N,"_",J*10,"_",K,f,g".csv",sep=""))
gest<-apply(g_temp[,buring:iter],1,mean)
gresidual<-gest-g
write.csv(gresidual,paste("gres",N,"_",J,"_",K,f,g".csv",sep=""))

Q.est<-Qest(person_temp,K,iter)
write.csv(Q.est,paste("alpha",N,"_",J,"_",K,f,g".csv",sep=""))
c_rate<-classificatoin(Q.est,Q.person,K)
write.csv(c_rate,paste("cr",N,"_",J,"_",K,f,g".csv",sep=""))
}
}
}
}
}

